{"version":3,"sources":["Components/Order/Order.js","Containers/Orders/Orders.js","Components/Order/Order.module.css"],"names":["order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ingredient","style","textTransform","display","margin","padding","border","key","className","styles","Order","price","Orders","this","onFetchOrders","token","userId","orders","loading","Spinner","id","toFixed","Component","connect","state","auth","dispatch","actions","module","exports"],"mappings":"uNAwCeA,EApCD,SAACC,GAEb,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC/BA,EAAYE,KAAK,CACfC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAI9B,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACvC,OAAO,0BACLC,MAAO,CACPC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,QAAS,MACTC,OAAQ,kBAGRC,IAAKP,EAAWJ,MACfI,EAAWJ,KAVP,KAUeI,EAAWH,OAV1B,QAcT,OACE,yBAAKW,UAAWC,IAAOC,OACrB,2CAAiBZ,GACjB,qCAAU,uCAAaN,EAAMmB,U,gBCxB7BC,E,4LAKFC,KAAKrB,MAAMsB,cAAcD,KAAKrB,MAAMuB,MAAOF,KAAKrB,MAAMwB,U,+BAItD,IAAIC,EASJ,OADSA,EAPRJ,KAAKrB,MAAM0B,QAOM,kBAACC,EAAA,EAAD,MAPa,6BAC5BN,KAAKrB,MAAMyB,OAAOlB,KAAI,SAAAR,GAAK,OAC1B,kBAACmB,EAAD,CACEH,IAAKhB,EAAM6B,GACX3B,YAAaF,EAAME,YACnBkB,MAAOpB,EAAMoB,MAAMU,QAAQ,SAIhC,6BACIJ,O,GApBYK,aAyCNC,uBARS,SAAAC,GACtB,MAAO,CACLN,QAASM,EAAMjC,MAAM2B,QACrBD,OAAQO,EAAMjC,MAAM0B,OACpBF,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,WAXI,SAAAU,GACzB,MAAO,CACLZ,cAAe,SAACC,EAAOC,GAAR,OAAmBU,EAASC,IAAoBZ,EAAOC,QAY3DO,CAA8CX,I,mBCjD7DgB,EAAOC,QAAU,CAAC,MAAQ","file":"static/js/5.f02dd718.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './Order.module.css';\r\n\r\n\r\nconst order = (props) => {\r\n\r\n  const ingredients = [];\r\n// eslint-disable-next-line\r\n  for (let ingredientName in props.ingredients) {\r\n    ingredients.push({\r\n      name: ingredientName, \r\n      amount: props.ingredients[ingredientName]\r\n    });\r\n  }\r\n\r\n  const ingredientOutput = ingredients.map(ingredient => {\r\n    return <span \r\n      style={{\r\n      textTransform: 'capitalize', \r\n      display: 'inline-block',\r\n      margin: '0 8px',\r\n      padding: '5px',\r\n      border: '1px solid #ccc' \r\n      \r\n      }}\r\n      key={ingredient.name}>\r\n      {ingredient.name} ({ingredient.amount}) \r\n      </span>\r\n  });\r\n\r\n  return(\r\n    <div className={styles.Order}>\r\n      <p>Ingredients: {ingredientOutput}</p>\r\n      <p>Price: <strong>USD {props.price}</strong></p>\r\n\r\n    </div>\r\n  );\r\n    \r\n}\r\n\r\nexport default order;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Order from '../../Components/Order/Order';\r\nimport * as actions from '../../store/actions/';\r\nimport Spinner from '../../Components/UI/Spinner/Spinner';\r\n\r\n\r\n\r\nclass Orders extends Component {\r\n\r\n  \r\n\r\n  componentDidMount () {\r\n    this.props.onFetchOrders(this.props.token, this.props.userId);\r\n  }\r\n\r\n  render() {\r\n    let orders;\r\n    !this.props.loading ? orders = <div>\r\n      {this.props.orders.map(order => (\r\n        <Order\r\n          key={order.id}\r\n          ingredients={order.ingredients}\r\n          price={order.price.toFixed(2)} />\r\n      ))}\r\n    </div> : orders = <Spinner/>\r\n    return(\r\n     <div>\r\n        {orders}\r\n     </div> \r\n    \r\n\r\n    );\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.order.loading,\r\n    orders: state.order.orders,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Orders);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__2JVna\"};"],"sourceRoot":""}