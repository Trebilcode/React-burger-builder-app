{"version":3,"sources":["Containers/Auth/Auth.module.css","Containers/Auth/Auth.js","Components/UI/Input/Input.js","Components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","submitHandler","event","preventDefault","props","onAuth","handleInputChange","controlName","updatedControls","updateObject","target","checkValidity","setState","switchButtonSignInSignUp","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","shouldValidate","invalid","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","styles","onSubmit","buttonType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","InputClasses","InputElement","Invalid","onChange","join","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.a2ac4891.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__wddFU\"};","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Redirect } from 'react-router-dom';\r\n\r\n\r\nimport Input from '../../Components/UI/Input/Input';\r\nimport Button from '../../Components/UI/Button/Button';\r\nimport styles from './Auth.module.css';\r\nimport Spinner from '../../Components/UI/Spinner/Spinner';\r\nimport * as actions from '../../store/actions/';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\n\r\n\r\nclass Auth extends Component {\r\n\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Your e-mail address'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n    },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      \r\n    },\r\n    isSignUp: true\r\n  }\r\n\r\n  componentDidMount () {\r\n    if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\r\n  }\r\n\r\n  handleInputChange = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, { \r\n      [controlName]: updateObject(this.state.controls[controlName], { \r\n        value: event.target.value,\r\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n        touched: true\r\n      })\r\n        \r\n      \r\n    }) \r\n      \r\n      \r\n    \r\n    this.setState({controls: updatedControls})\r\n  }\r\n\r\n  switchButtonSignInSignUp = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        isSignUp: !prevState.isSignUp\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n \r\n\r\n\r\n    const formElementsArray = [];\r\n    // eslint-disable-next-line\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      })\r\n    }\r\n\r\n     let form = formElementsArray.map(formElement => {\r\n      return <Input\r\n      key={formElement.id}\r\n      touched={formElement.config.touched}\r\n      shouldValidate={formElement.config.validation}\r\n      invalid={!formElement.config.valid}\r\n      changed={(event) => this.handleInputChange(event, formElement.id)}\r\n      elementType={formElement.config.elementType}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      />\r\n    })\r\n\r\n    if(this.props.loading) {\r\n      form = <Spinner/>\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if(this.props.error) {\r\n      errorMessage = (\r\n        <p>{this.props.error.message}</p>\r\n      )\r\n    }\r\n    let authRedirect = null;\r\n    if(this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n    }\r\n\r\n    return (\r\n      <div className={styles.Auth}>\r\n      {authRedirect}\r\n      {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button buttonType='Success'>SUBMIT</Button>\r\n\r\n\r\n        </form>\r\n\r\n          <Button clicked={this.switchButtonSignInSignUp} buttonType='Danger'>SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n const mapDispatchToProps = dispatch => {\r\n   return {\r\n     onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n     onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPatch('/'))\r\n   }\r\n }\r\n\r\n const mapStateToProps = state => {\r\n   return {\r\n     loading: state.auth.loading,\r\n     error: state.auth.error,\r\n     isAuthenticated: state.auth.token !== null,\r\n     buildingBurger: state.burgerBuilder.building,\r\n     authRedirectPath: state.auth.authRedirectPath\r\n   }\r\n }\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Auth);","import React from 'react';\r\n\r\n\r\nimport styles from './Input.module.css';\r\n\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const InputClasses = [styles.InputElement];\r\n\r\n  if(props.invalid && props.shouldValidate && props.touched) {\r\n    InputClasses.push(styles.Invalid)\r\n  }\r\n  switch (props.elementType) {\r\n    \r\n    case ('input'):\r\n      inputElement = <input onChange={props.changed} className={InputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\r\n      break;\r\n    case ('textarea'):\r\n      inputElement = <textarea onChange={props.changed} className={InputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\r\n      break;\r\n    case ('select'):\r\n      inputElement = (\r\n        <select \r\n        onChange={props.changed}\r\n        className={InputClasses.join(' ')} \r\n        value={props.value}>\r\n        {props.elementConfig.options.map(option => (\r\n          <option key={option.value} value={option.value}>\r\n          {option.displayValue}\r\n          </option>\r\n        ))} />\r\n        </select>\r\n        );\r\n      break;\r\n    \r\n    default:\r\n      inputElement = <input onChange={props.changed} className={InputClasses} {...props.elementConfig}value={props.value}/>\r\n  }\r\n  \r\n\r\n  return(\r\n    <div className={styles.Input}>\r\n      <label className={styles.Label}>\r\n\r\n    {props.label}\r\n      </label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1mNjq\",\"Label\":\"Input_Label__3QGRi\",\"InputElement\":\"Input_InputElement__2mk1L\",\"Invalid\":\"Input_Invalid__AD6vm\"};"],"sourceRoot":""}