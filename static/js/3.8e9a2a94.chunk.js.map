{"version":3,"sources":["Components/Order/CheckoutSummary.js","Containers/Checkout/ContactData/ContactData.js","Containers/Checkout/Checkout.js","Components/UI/Input/Input.js","Components/UI/Input/Input.module.css","Components/Order/CheckoutSummary.module.css","Containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","styles","CheckoutSummary","style","width","margin","Burger","ingredients","Button","clicked","cancelCheckout","buttonType","continueCheckout","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","maxLength","valid","touched","country","zipCode","isNumeric","address","email","isEmail","deliveryMethod","options","displayValue","formIsValid","loading","handleOrder","event","preventDefault","formData","formId","order","ings","price","orderData","userId","onOrderBurger","token","history","push","handleInputChange","inputId","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","id","config","form","onSubmit","map","formElement","Input","shouldValidate","invalid","changed","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","Checkout","handleContinueCheckout","replace","handleCancelCheckout","goBack","summary","to","path","match","component","purchased","input","inputElement","InputClasses","InputElement","Invalid","onChange","join","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.8e9a2a94.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Burger from '../../Components/Burger/Burger';\r\nimport Button from '../UI/Button/Button';\r\nimport styles from './CheckoutSummary.module.css';\r\n\r\n\r\n\r\nconst checkoutSummary = (props) => {\r\n  return(\r\n    <div className={styles.CheckoutSummary}>\r\n      <h1>Delicious hamburger</h1>\r\n      <div style={{width: '100%', margin: 'auto'}}>\r\n      <Burger ingredients={props.ingredients}/>\r\n      </div>\r\n      <Button \r\n      clicked={props.cancelCheckout}\r\n      buttonType={'Danger'}>\r\n      CANCEL\r\n      </Button>\r\n      <Button\r\n      clicked={props.continueCheckout}\r\n      buttonType={'Success'}>\r\n      CONTINUE\r\n      </Button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\n\r\nimport Button from '../../../Components/UI/Button/Button';\r\nimport styles from './ContactData.module.css';\r\nimport Spinner from '../../../Components/UI/Spinner/Spinner';\r\nimport Input from '../../../Components/UI/Input/Input';\r\nimport * as actions from '../../../store/actions/order';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\n\r\n\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      \r\n      name: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Your Name'\r\n        },\r\n        value:'',\r\n        validation: {\r\n          required: true,\r\n          minLength: 4,\r\n          maxLength: 10\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }, \r\n      country: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Your Country'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n         \r\n      zipCode: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Postal Code'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          maxLength: 5,\r\n          minLength: 3,\r\n          isNumeric: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n            \r\n      address: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Your Address'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Your E-mail'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      \r\n      deliveryMethod: {\r\n        elementType: 'select',\r\n        elementConfig: {\r\n          options: [{\r\n            value: 'fastest',\r\n            displayValue: 'Fastest'\r\n          },\r\n          {\r\n            value: 'cheapest',\r\n            displayValue: 'Cheapest'\r\n          }]\r\n        },\r\n        valid: true,\r\n        value:'cheapest',\r\n        validation: {}\r\n\r\n      }\r\n\r\n    },\r\n    formIsValid: false,\r\n    loading: false\r\n\r\n  }\r\n\r\n  handleOrder = (event) => {\r\n    event.preventDefault();\r\n      \r\n        const formData = {};\r\n        // eslint-disable-next-line\r\n        for (let formId in this.state.orderForm) {\r\n          formData[formId] = this.state.orderForm[formId].value; \r\n        }\r\n         const order = {\r\n          ingredients: this.props.ings,\r\n          price: this.props.price,\r\n          orderData: formData,\r\n          userId: this.props.userId\r\n          \r\n      }\r\n      this.props.onOrderBurger(order, this.props.token);\r\n      this.props.history.push('/')\r\n        \r\n  }\r\n\r\n  \r\n\r\n  handleInputChange = (event, inputId) => {\r\n    \r\n    const updatedFormElement = updateObject(this.state.orderForm[inputId], {\r\n    value: event.target.value,\r\n      valid: checkValidity (event.target.value, this.state.orderForm[inputId].validation),\r\n    touched: true\r\n    });\r\n\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {[inputId]: updatedFormElement});\r\n\r\n    \r\n    \r\n    let formIsValid = true;\r\n    // eslint-disable-next-line\r\n    for (let inputId in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputId].valid && formIsValid;\r\n    }\r\n    this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid})\r\n    \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const formElementsArray = [];\r\n    // eslint-disable-next-line\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key]\r\n      })\r\n    }    \r\n\r\n    let form = (\r\n      <form onSubmit={this.handleOrder}>\r\n        {formElementsArray.map(formElement =>(\r\n          <Input\r\n          touched={formElement.config.touched}\r\n          shouldValidate={formElement.config.validation}\r\n          invalid={!formElement.config.valid}\r\n          changed={(event) =>this.handleInputChange(event, formElement.id)}\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}/>\r\n        ))}\r\n        <Button disabled={!this.state.formIsValid}  buttonType='Success'>ORDER</Button>\r\n\r\n\r\n\r\n\r\n      </form>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />\r\n    }\r\n\r\n    return (\r\n      <div className={styles.ContactData}>\r\n        <h4>Please enter your contact data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.order.loading,\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport CheckoutSummary from '../../Components/Order/CheckoutSummary';\r\nimport ContactData from '../Checkout/ContactData/ContactData';\r\n\r\n\r\n\r\n\r\nclass Checkout extends Component {\r\n\r\n        handleContinueCheckout = () => {\r\n      this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    handleCancelCheckout = () => {\r\n      this.props.history.goBack();\r\n    }\r\n\r\n\r\nrender () {\r\n  let summary = <Redirect to='/'/>\r\n  if (this.props.ings) {\r\n    \r\n    summary = <div>\r\n      \r\n      <CheckoutSummary\r\n        cancelCheckout={this.handleCancelCheckout}\r\n        continueCheckout={this.handleContinueCheckout}\r\n\r\n        ingredients={this.props.ings}\r\n      />\r\n      <Route\r\n        path={this.props.match.path + '/contact-data'} component={ContactData} />\r\n    </div>\r\n\r\n  } \r\n  return summary;\r\n}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default connect( mapStateToProps )( Checkout ); ","import React from 'react';\r\n\r\n\r\nimport styles from './Input.module.css';\r\n\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const InputClasses = [styles.InputElement];\r\n\r\n  if(props.invalid && props.shouldValidate && props.touched) {\r\n    InputClasses.push(styles.Invalid)\r\n  }\r\n  switch (props.elementType) {\r\n    \r\n    case ('input'):\r\n      inputElement = <input onChange={props.changed} className={InputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\r\n      break;\r\n    case ('textarea'):\r\n      inputElement = <textarea onChange={props.changed} className={InputClasses.join(' ')} {...props.elementConfig} value={props.value}/>;\r\n      break;\r\n    case ('select'):\r\n      inputElement = (\r\n        <select \r\n        onChange={props.changed}\r\n        className={InputClasses.join(' ')} \r\n        value={props.value}>\r\n        {props.elementConfig.options.map(option => (\r\n          <option key={option.value} value={option.value}>\r\n          {option.displayValue}\r\n          </option>\r\n        ))} />\r\n        </select>\r\n        );\r\n      break;\r\n    \r\n    default:\r\n      inputElement = <input onChange={props.changed} className={InputClasses} {...props.elementConfig}value={props.value}/>\r\n  }\r\n  \r\n\r\n  return(\r\n    <div className={styles.Input}>\r\n      <label className={styles.Label}>\r\n\r\n    {props.label}\r\n      </label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1mNjq\",\"Label\":\"Input_Label__3QGRi\",\"InputElement\":\"Input_InputElement__2mk1L\",\"Invalid\":\"Input_Invalid__AD6vm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2RIae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__22o7k\"};"],"sourceRoot":""}